#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section
Comportamento
\end_layout

\begin_layout Subsection
Perl
\end_layout

\begin_layout Standard
Il sito è stato sviluppato per la quasi sua interezza mediante pagine dinamiche,
 scritte in linguaggio Perl.
 Questa scelta è dovuta al fatto che una stessa pagina mostra contenuti
 diversi a seconda che l'utente sia registrato o meno.
 Inoltre il linguaggio Perl offre la possibilità di utilizzare e gestire
 le sessioni come metodo di scambio dati fra pagine.
\end_layout

\begin_layout Standard
Le sessioni, oltre al tipico utilizzo, sono state utili a mantenere e garantire
 l'integrità referenziale, durante la fase di prenotazione di un prodotto
 enologico, assicurando che l'utente che effettua l'ordine sia presente
 fra i registrati.
\end_layout

\begin_layout Standard
Le pagine realizzate consentono di:
\end_layout

\begin_layout Itemize
stampare codice xhtml
\end_layout

\begin_layout Itemize
leggere e scrivere codice xml
\end_layout

\begin_layout Itemize
trasformare codice xsl in codice xhtml
\end_layout

\begin_layout Itemize
passare parametri fra pagine .cgi
\end_layout

\begin_layout Subsubsection
Stampare codice xhtml 
\end_layout

\begin_layout Standard
Per soddisfare tale necessità sono state definite alcune funzioni all'interno
 del file 
\emph on
static.cgi
\emph default
, situato in 
\emph on
/cgi-bin/funzioni
\emph default
, che si occupano di stampare le varie componenti che costituiscono le pagine
 del sito.
 Molte di queste ricevono in ingresso dei parametri, utili a personalizzare
 le pagine.
\end_layout

\begin_layout Standard
La scelta di di realizzare il codice xhtml tramite libreria CGI è dovuta
 al fatto che consente di mantenere un buon grado di disgiunzione fra il
 codice utile a realizzare la struttura di una pagina, e quello che gestisce
 il contenuto.
 Inoltre questa scelta di modellazione rende il codice facilmente riutilizzabile
 e manutenibile, semplificando così l'operazione di modifiche future.
\end_layout

\begin_layout Subsubsection
Leggere e scrivere codice xml
\end_layout

\begin_layout Standard
Essendo i dati del sito memorizzati ed organizzati in file di tipo xml,
 si è reso necessario interagire con questi.
 Per semplificare alcune azioni in lettura è stato utile eliminare i namespace
 perchè così facendo si è reso possibile utilizzare la libreria XML::LibXML.
 Tale libreria mette a disposizione dei metodi intuitivi per interrogare
 i file xml.
 
\end_layout

\begin_layout Standard
Questa strategia non è una 
\emph on
best-practice
\emph default
 ma ha facilitato il lavoro del gruppo quindi, in seguito ad una scelta
 collettiva, è presente nella maggior parte dei file che compongono il sito.
\end_layout

\begin_layout Subsubsection
Trasformare codice xsl in codice xhtml
\end_layout

\begin_layout Standard
Come descritto nella parte che tratta i dati, la trasformazione da codice
 xsl in xhtml è stata implementata nei file 
\emph on
index.cgi
\emph default
 e 
\emph on
catalogo.cgi 
\emph default
.
 Queste due pagine realizzano dei semplici parser che mediante la libreria
 XML::LibXSLT trasformano le singole righe xsl in righe di xhtml valido.
 La scelta è stata influenzata dal fatto che questo metodo rende più semplice
 e veloce la stampa di una grande mole di dati che sarebbe stata decisamente
 molto più onerosa se gestita solamente tramite perl.
\end_layout

\begin_layout Standard
Inoltre la trasformazione dei fogli di stile xslt, lato server così realizzati,
 rende il codice prodotto automaticamente accessibile a qualsiasi browser,
 nascondendo la struttura del foglio xml.
\end_layout

\begin_layout Subsubsection
Passare paramentri fra file .cgi
\end_layout

\begin_layout Standard
Per rendere possibile lo scambio di dati fra le pagine 
\emph on
.cgi 
\emph default
sono stati utilizzati tre metodi offerti dal linguaggio Perl a seconda delle
 situazioni: le sessioni, ed i metodi post e get.
\end_layout

\begin_layout Standard
Il metodo get si è reso utile per la visualizzazione dettagliata del singolo
 prodotto, inserendo nella barra del URL, nel modo corretto, l'etichetta
 del vino di cui si volevano conoscere le informazioni.
 Si è deciso di utilizzare tale metodo per la visualizzazione specifica
 del vino per far si che un utente possa facilmente ritornare a visitare
 una di queste pagine e perchè i dati che compaiono in chiaro non sono sensibili.
\end_layout

\begin_layout Standard
Il metodo post invece è stato utilizzato in ogni pagina in cui un utente
 ha la possibilità di interagire con il sito inserendo dati o inviado richieste
 al server.
 La tecnica scelta è stata utile per assicurare l'usabilità nelle pagine
 in cui un utente inserisce dei dati da inviare al server, perchè così facendo
 è possibile segnalare specificatamente gli errori di immissione e mantenere
 i dati corretti.
 È possibile osservare il comportamento appena descritto nei file 
\emph on
login.cgi
\emph default
 e 
\emph on
registrati.cgi
\emph default
.
\end_layout

\begin_layout Standard
Le sessioni sono state usate per mantenere e controllare lo stato di un
 utente loggato, e su questo il gruppo ha dovuto superare il problema determinat
o dal fatto che la release installata nel server del laboratorio si è dimostrata
 meno recente di quella che si è usata nelle prove locali.
 Per ovviare a questo problema si sono dovute applicare le sessioni come
 richiesto dalla release 
\emph on
3.95
\emph default
; l'uso delle sessioni in questa maniera richiede che venga passato l'id
 di una sessione da una pagina all'altra.
 Questo modo di agire è applicabile in tre diversi modi, tramite: get, post
 o cookie.
 Il metodo risultato più elegante e sicuro è risultato essere il metodo
 dei cookie, tralasciando il rischio che un utente possa disabilitare localmente
 l'uso dei coockie, perchè stando allo studio di analisi dell'utenza si
 presuppone che la maggior parte dei nostri utenti
\emph on
 
\emph default
non abbia conoscenze sufficienti per far ciò.
\end_layout

\begin_layout Subsection
Scelte implementative
\end_layout

\begin_layout Standard
Per garantire l'usabilità e una buona esperienza di navigazione del nostro
 sito, si sono rese necessarie alcune scelte.
 
\end_layout

\begin_layout Standard
Si è scelto di reindirizzare un utente alla propria pagina personale una
 volta che effettua correttamente un ordine, dove è visibile la buona riuscita
 dell'operazione e l'insieme delle varie ordinazioni non ancora evase.
 La scelta è dovuta al fatto che la tecnologia che ci consente di stampare
 la pagina 
\emph on
catalogo.cgi
\emph default
 non ci consente di stampare un messaggio che avvisi l'utente che la sua
 ordinazione è stata ricevuta correttamente.
\end_layout

\begin_layout Standard
Anche quando un utente effettua il login questo viene reindirizzato alla
 propria pagina personale
\end_layout

\begin_layout Subsection
Sicurezza e controlli
\end_layout

\end_body
\end_document
